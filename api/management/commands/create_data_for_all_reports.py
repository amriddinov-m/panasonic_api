# <app_name>/management/commands/seed_reports_demo.py
import random
from datetime import datetime, timedelta, date
from decimal import Decimal, ROUND_HALF_UP

from django.core.management.base import BaseCommand
from django.db import transaction
from django.db.models import Min
from django.utils import timezone
from django.contrib.auth import get_user_model

from api.models import (  # ü§ö –ó–ê–ú–ï–ù–ò "app" –Ω–∞ –∏–º—è —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–æ–¥–µ–ª—è–º–∏
    Product, ProductCategory,
    Warehouse, WarehouseProduct,
    Order, OrderItem,
    Outcome, OutcomeItem,
    Income, IncomeItem,
    Report, ReportItem,
)

# ------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ------------------------

def dec(x) -> Decimal:
    return Decimal(str(x)).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

def pick(seq):
    return seq[random.randrange(len(seq))]

def month_range(months_back: int):
    """–°–ø–∏—Å–æ–∫ (year, month) –æ—Ç (—Å–µ–≥–æ–¥–Ω—è - months_back+1) –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ."""
    today = timezone.now().date().replace(day=1)
    out = []
    for i in range(months_back):
        m = today.month - (months_back - 1 - i)
        y = today.year
        while m <= 0:
            m += 12
            y -= 1
        out.append((y, m))
    return out  # [(2024, 8), (2024, 9), ...]


def ensure_user_minimal(label: str, idx: int):
    """
    –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π.
    –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±—ã–µ –ø–æ–ª—è), –≤–µ—Ä–Ω—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ id=1.
    """
    User = get_user_model()
    try:
        field_names = {f.name for f in User._meta.get_fields()}
        kwargs = {}
        # –ü–µ—Ä–≤–∏—á–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º email/first_name/last_name
        if "email" in field_names:
            kwargs["email"] = f"{label}.{idx}@example.local"
        if "first_name" in field_names:
            kwargs["first_name"] = f"{label.capitalize()}{idx}"
        if "last_name" in field_names:
            kwargs["last_name"] = "Demo"
        if "username" in field_names:
            kwargs["username"] = f"{label}{idx}"

        # –ü–æ–ø—Ä–æ–±—É–µ–º create (–Ω–µ create_user ‚Äî —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å password)
        u = User.objects.create(**kwargs)
        return u
    except Exception:
        # fallback: –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ id=1
        try:
            return User.objects.get(pk=1)
        except User.DoesNotExist:
            # –Ω—É —Å–æ–≤—Å–µ–º –∫—Ä–∞–π ‚Äî —Å–æ–∑–¥–∞–¥–∏–º ¬´—Å—ã—Ä–∞—è¬ª –∑–∞–ø–∏—Å—å —Å –º–∏–Ω–∏–º–∞–ª–∫–æ–π –ø–æ —Ç–æ–º—É, —á—Ç–æ –µ—Å—Ç—å
            kwargs = {}
            if "email" in field_names:
                kwargs["email"] = f"demo@{label}.local"
            if "first_name" in field_names:
                kwargs["first_name"] = "Demo"
            if "last_name" in field_names:
                kwargs["last_name"] = "User"
            if "username" in field_names:
                kwargs["username"] = f"{label}demo"
            return User.objects.create(**kwargs)


def ensure_warehouses(creator):
    warehouses = list(Warehouse.objects.all()[:3])
    if len(warehouses) >= 3:
        return warehouses
    # —Å–æ–∑–¥–∞—ë–º 3 —Å–∫–ª–∞–¥–∞: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π, –í–æ—Å—Ç–æ–∫, –ó–∞–ø–∞–¥
    names = ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥", "–°–∫–ª–∞–¥ –í–æ—Å—Ç–æ–∫", "–°–∫–ª–∞–¥ –ó–∞–ø–∞–¥"]
    existing_names = {w.name for w in warehouses}
    to_create = []
    for name in names:
        if name not in existing_names:
            to_create.append(Warehouse(name=name, responsible=creator, user=creator))
    if to_create:
        Warehouse.objects.bulk_create(to_create)
    return list(Warehouse.objects.all()[:3])


def ensure_categories_and_prices(creator, products):
    """
    –£ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ü–µ–Ω—ã. –°–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    –∏ —Ä–∞–∑–¥–∞–¥–∏–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ü–µ–Ω–∞–º.
    """
    if not products:
        return

    cats = list(ProductCategory.objects.all())
    if not cats:
        cats = [
            ProductCategory(name="–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã", status="active", user=creator),
            ProductCategory(name="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", status="active", user=creator),
            ProductCategory(name="–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", status="active", user=creator),
        ]
        ProductCategory.objects.bulk_create(cats)
        cats = list(ProductCategory.objects.all())

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ü–µ–Ω—É, –µ—Å–ª–∏ 0/None, –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç
    updates = []
    for p in products:
        changed = False
        if p.price is None or p.price == 0:
            p.price = dec(random.randint(50, 2500) / (10 if p.unit_type == "kg" else 1))
            changed = True
        if p.category_id is None:
            p.category = pick(cats)
            changed = True
        if changed:
            updates.append(p)
    if updates:
        Product.objects.bulk_update(updates, ["price", "category"])


def ensure_products(creator, min_count=50):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö. –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º.
    """
    products = list(Product.objects.all())
    if len(products) >= min_count:
        ensure_categories_and_prices(creator, products)
        return products

    # —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ
    to_create = []
    for i in range(min_count - len(products)):
        unit = pick(["pcs", "kg"])
        to_create.append(Product(
            name=f"DEMO –¢–æ–≤–∞—Ä {i+1}",
            unit_type=unit,
            price=dec(random.randint(100, 5000) / (10 if unit == "kg" else 1)),
            status="active",
            user=creator,
            category=None,  # –ø—Ä–æ—Å—Ç–∞–≤–∏–º –Ω–∏–∂–µ
        ))
    if to_create:
        Product.objects.bulk_create(to_create)

    products = list(Product.objects.all())
    ensure_categories_and_prices(creator, products)
    return products


def ensure_clients(count, fallback_user):
    """
    –°–æ–∑–¥–∞—ë–º N –∫–ª–∏–µ–Ω—Ç–æ–≤ (–¥–∏–ª–µ—Ä–æ–≤). –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ fallback_user * N.
    """
    created = []
    for i in range(count):
        u = ensure_user_minimal("client", i + 1)
        created.append(u)
    # –µ—Å–ª–∏ –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (fallback), —Ç–æ –≤–µ—Ä–Ω—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ set?
    # –î–ª—è –æ—Ç—á—ë—Ç–æ–≤ –ª—É—á—à–µ –∏–º–µ—Ç—å >=2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–¥–∏–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –¥—É–±–ª–∏—Ä—É–µ–º id=1.
    return created or [fallback_user]


def dt_random_in_month(y, m):
    # —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (1..28, —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è —Å –¥–ª–∏–Ω–æ–π)
    d = random.randint(1, 28)
    h = random.randint(9, 18)
    mi = random.randint(0, 59)
    return timezone.make_aware(datetime(y, m, d, h, mi))


# ------------------------
# –û–°–ù–û–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê
# ------------------------

class Command(BaseCommand):
    help = "–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ (–ø–ª–∞–Ω—ã, –∑–∞–∫–∞–∑—ã, –æ—Ç–≥—Ä—É–∑–∫–∏, –ø—Ä–∏—Ö–æ–¥—ã, –æ—Å—Ç–∞—Ç–∫–∏)."

    def add_arguments(self, parser):
        parser.add_argument("--months", type=int, default=14, help="–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 14.")
        parser.add_argument("--clients", type=int, default=5, help="–°–∫–æ–ª—å–∫–æ –¥–∏–ª–µ—Ä–æ–≤ —Å–æ–∑–¥–∞—Ç—å (–µ—Å–ª–∏ –º–æ–∂–Ω–æ). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5.")
        parser.add_argument("--orders-per-month", type=int, default=120, help="–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü (–Ω–∞ –≤—Å–µ—Ö –¥–∏–ª–µ—Ä–æ–≤ –∏ —Å–∫–ª–∞–¥—ã).")
        parser.add_argument("--seed", type=int, default=42, help="Seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏.")
        parser.add_argument("--central-stock", type=int, default=1, help="–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∑–∞–ø–∞—Å –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —Å–∫–ª–∞–¥–µ (–º–Ω–æ–∂–∏—Ç–µ–ª—å).")

    def handle(self, *args, **opts):
        random.seed(opts["seed"])

        months_back = max(2, opts["months"])
        clients_n = max(1, opts["clients"])
        orders_target = max(20, opts["orders_per_month"])
        central_stock_factor = max(1, opts["central_stock"])

        self.stdout.write(self.style.NOTICE(f"Generating demo data: months={months_back}, clients={clients_n}, orders/month‚âà{orders_target}"))

        # 1) –ë–∞–∑–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
        User = get_user_model()
        creator = None
        try:
            creator = User.objects.get(pk=1)
        except User.DoesNotExist:
            creator = ensure_user_minimal("owner", 1)

        warehouses = ensure_warehouses(creator)
        central = warehouses[0]
        products = ensure_products(creator, min_count=80)
        clients = ensure_clients(clients_n, fallback_user=creator)

        # 2) –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (WarehouseProduct) ‚Äî –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        #    –ß—Ç–æ–±—ã ¬´–æ—Å—Ç–∞—Ç–∫–∏¬ª –∏ ¬´–¥–µ—Ñ–∏—Ü–∏—Ç—ã¬ª —Ä–∞–±–æ—Ç–∞–ª–∏ —Å—Ä–∞–∑—É.
        self._seed_initial_stocks(products, warehouses, creator, central_stock_factor)

        # 3) –ü–ª–∞–Ω—ã (Report + ReportItem) ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        #    –ü–ª–∞–Ω = –±–∞–∑–æ–≤—ã–π –æ–±–æ—Ä–æ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç—É, —Å —Ä–∞–∑–±—Ä–æ—Å–æ–º –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º.
        months = month_range(months_back)
        self._seed_plans(months, clients, products, creator)

        # 4) –ó–∞–∫–∞–∑—ã (Order + OrderItem) –∏ –û—Ç–≥—Ä—É–∑–∫–∏ (Outcome + OutcomeItem)
        #    –ò—Ç–æ–≥–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –æ–∫–æ–ª–æ –ø–ª–∞–Ω–∞ ¬± —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º.
        self._seed_orders_and_outcomes(months, clients, products, warehouses, creator, orders_target)

        # 5) –ü—Ä–∏—Ö–æ–¥—ã (Income + IncomeItem): —á–∞—Å—Ç—å pending/active ‚Äî —á—Ç–æ–±—ã ¬´–¥–µ—Ñ–∏—Ü–∏—Ç—ã¬ª —É—á–∏—Ç—ã–≤–∞–ª–∏ –±—É–¥—É—â–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏
        self._seed_incomes(months, products, warehouses, creator)

        self.stdout.write(self.style.SUCCESS("Demo data generated successfully."))

    # ------------- GENERATORS -------------

    def _seed_initial_stocks(self, products, warehouses, creator, factor: int):
        """
        –ë—Ä–æ—Å–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∑–∞–ø–∞—Å: –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º ‚Äî –ø–æ–±–æ–ª—å—à–µ; –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –ø–æ–º–µ–Ω—å—à–µ.
        """
        existing = WarehouseProduct.objects.count()
        if existing > 0:
            return

        to_create = []
        for w in warehouses:
            for p in random.sample(products, k=max(10, len(products)//2)):
                base = random.randint(5, 40)
                qty = base * (3 if w == warehouses[0] else 1) * factor
                price = p.price or dec(random.randint(100, 5000))
                to_create.append(WarehouseProduct(
                    product=p, warehouse=w, count=qty, price=price, status="in_stock", user=creator
                ))
        WarehouseProduct.objects.bulk_create(to_create)

    def _seed_plans(self, months, clients, products, creator):
        """
        Report(status=confirmed) per client per month.
        ReportItem.count –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ ¬´—à—Ç—É–∫–∞—Ö¬ª (–∏–ª–∏ –∫–≥), –¥–µ–Ω—å–≥–∏ —Å—á–∏—Ç–∞–µ–º –ø–æ Product.price.
        """
        # –Ω–µ –±—É–¥–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å confirmed –∑–∞ —ç—Ç–∏ –º–µ—Å—è—Ü—ã
        have_any = Report.objects.filter(status=Report.Status.confirmed).exists()
        if have_any:
            return

        for (y, m) in months:
            for client in clients:
                r = Report.objects.create(
                    client=client, comment=f"–ü–ª–∞–Ω –Ω–∞ {y}-{m:02d}", status=Report.Status.confirmed, period=m
                )
                # –¥–ª—è –ø–ª–∞–Ω–∞ –±–µ—Ä—ë–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
                items = []
                # 10‚Äì20 SKU –≤ –ø–ª–∞–Ω–µ
                skus = random.sample(products, k=random.randint(10, 20))
                for p in skus:
                    # –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –≤ —à—Ç—É–∫–∞—Ö/–∫–≥
                    base = random.randint(5, 60)
                    items.append(ReportItem(
                        report=r, product=p, count=base
                    ))
                ReportItem.objects.bulk_create(items)

    def _seed_orders_and_outcomes(self, months, clients, products, warehouses, creator, orders_target):
        """
        –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü: —Å–æ–∑–¥–∞—ë–º –ø–∞—á–∫—É Order/OrderItem –∏ Outcome/OutcomeItem (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ).
        –ß–∞—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–º–µ–Ω—è–µ–º/–¥–æ—Å—Ç–∞–≤–ª—è–µ–º; —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ ‚Äî –≤ —Å—Ç–∞—Ç—É—Å–µ finished.
        """
        # –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã/–æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –º–µ—Å—è—Ü
        if Order.objects.exists() and Outcome.objects.exists():
            return

        for (y, m) in months:
            # —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: –æ—Ç 70% –¥–æ 130% —Ü–µ–ª–∏
            orders_in_month = max(10, int(orders_target * random.uniform(0.7, 1.3)))
            all_orders = []
            all_oitems = []
            all_outcomes = []
            all_out_items = []

            for _ in range(orders_in_month):
                client = pick(clients)
                wh = pick(warehouses)
                created_dt = dt_random_in_month(y, m)

                # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                status = random.choices(
                    population=[
                        Order.Status.pending,
                        Order.Status.collected,
                        Order.Status.delivering,
                        Order.Status.delivered,
                        Order.Status.sent,
                        Order.Status.cancelled,
                    ],
                    weights=[10, 10, 15, 40, 15, 10],
                    k=1
                )[0]

                o = Order(
                    client=client, user=creator, warehouse=wh,
                    comment="DEMO Order", status=status,
                    total_amount=dec(0), created=created_dt, updated=created_dt
                )
                all_orders.append(o)

            Order.objects.bulk_create(all_orders)

            # –ü—Ä–∏–≤—è–∂–µ–º –∞–π—Ç–µ–º—ã –∫ –∑–∞–∫–∞–∑–∞–º
            # –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑: 1‚Äì5 SKU –ø–æ 1‚Äì50 —à—Ç
            orders = list(Order.objects.filter(created__year=y, created__month=m))
            for o in orders:
                n_items = random.randint(1, 5)
                skus = random.sample(products, k=n_items)
                total = dec(0)
                for p in skus:
                    qty = random.randint(1, 50)
                    price = p.price or dec(random.randint(100, 5000))
                    all_oitems.append(OrderItem(
                        order=o, product=p, count=qty, price=price, status="ok", user=creator
                    ))
                    total += dec(qty) * dec(price)
                o.total_amount = total
            Order.objects.bulk_update(orders, ["total_amount"])

            OrderItem.objects.bulk_create(all_oitems)

            # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –¥–ª—è 70‚Äì85% –∑–∞–∫–∞–∑–æ–≤ (–∫–∞–∫ finished)
            realized_orders = random.sample(orders, k=int(len(orders) * random.uniform(0.7, 0.85)))
            for o in realized_orders:
                # –∫–æ–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ Outcome
                out = Outcome(
                    client=o.client, status=Outcome.Status.finished, user=creator,
                    comment=f"DEMO Outcome for order {o.id}",
                    total_amount=dec(0), warehouse=o.warehouse,
                    created=o.created + timedelta(hours=1), updated=o.created + timedelta(hours=1)
                )
                all_outcomes.append(out)

            Outcome.objects.bulk_create(all_outcomes)
            outcomes = list(Outcome.objects.filter(created__year=y, created__month=m))

            # —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º –∑–∞–∫–∞–∑->–æ—Ç–≥—Ä—É–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏/–∫–ª–∏–µ–Ω—Ç—É/—Å–∫–ª–∞–¥—É
            # (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ)
            o_by_key = {}
            for o in realized_orders:
                key = (o.client_id, o.warehouse_id)
                o_by_key.setdefault(key, []).append(o)

            out_by_key = {}
            for out in outcomes:
                key = (out.client_id, out.warehouse_id)
                out_by_key.setdefault(key, []).append(out)

            # —Å–æ–∑–¥–∞—ë–º OutcomeItem –ø–æ —Ç–µ–º –∂–µ SKU, —á—Ç–æ –≤ –∑–∞–∫–∞–∑–µ, —É–º–µ–Ω—å—à–∏–≤/–∏–∑–º–µ–Ω–∏–≤ qty +/- 20%
            for key, ords in o_by_key.items():
                outs = out_by_key.get(key, [])
                for idx, order in enumerate(ords):
                    if idx >= len(outs):
                        break
                    out = outs[idx]
                    items = list(OrderItem.objects.filter(order=order))
                    total = dec(0)
                    for it in items:
                        # 80‚Äì120% –æ—Ç –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
                        qty = max(1, int(it.count * random.uniform(0.8, 1.2)))
                        price = it.price
                        all_out_items.append(OutcomeItem(
                            outcome=out, product=it.product, count=qty, price=price, status="ok", user=creator
                        ))
                        total += dec(qty) * dec(price)
                    out.total_amount = total

            if all_out_items:
                OutcomeItem.objects.bulk_create(all_out_items)
            if outcomes:
                Outcome.objects.bulk_update(outcomes, ["total_amount"])

    def _seed_incomes(self, months, products, warehouses, creator):
        """
        –ü—Ä–∏—Ö–æ–¥—ã (—á–∞—Å—Ç—å pending/active), —á—Ç–æ–±—ã –æ—Ç—á—ë—Ç –ø–æ –¥–µ—Ñ–∏—Ü–∏—Ç–∞–º –º–æ–≥ —É—á–∏—Ç—ã–≤–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∏—Ö–æ–¥—ã.
        """
        # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–∏—Ö–æ–¥—ã ‚Äî –Ω–µ –ø–ª–æ–¥–∏–º
        if Income.objects.exists():
            return

        for (y, m) in months[-6:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            for _ in range(random.randint(5, 12)):
                wh = pick(warehouses)
                created_dt = dt_random_in_month(y, m)
                status = random.choice([Income.Status.pending, Income.Status.active, Income.Status.finished])

                inc = Income(
                    client=creator,  # —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∫–ª–∏–µ–Ω—Ç, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ
                    user=creator, comment="DEMO Income", status=status,
                    total_amount=dec(0), warehouse=wh,
                    created=created_dt, updated=created_dt
                )
                inc.save()

                n_items = random.randint(1, 5)
                items = []
                total = dec(0)
                for p in random.sample(products, k=n_items):
                    qty = random.randint(5, 80)
                    price = p.price or dec(random.randint(100, 5000))
                    items.append(IncomeItem(
                        income=inc, product=p, count=qty, price=price, status="ok", user=creator
                    ))
                    total += dec(qty) * dec(price)
                IncomeItem.objects.bulk_create(items)
                inc.total_amount = total
                inc.save()
